package com.gao.test2;

/**
 * String-StringBuffer-StringBuilder 方法练习
 * @author XX
 *
 */
public class Test04 {
	public static void main(String[] args) {
		testString();
	}
	
	public static void testString(){
		//几种构造方法
		String string = new String();
		String string2 = new String("abc");
		String string3 = new String(new char[]{'a','b','c'});
		/**string4
		 * 分配一个新的 String，它包含取自字符数组参数一个子数组的字符。
		 * offset 参数是子数组第一个字符的索引，count 参数指定子数组的长度。
		 * 该子数组的内容已被复制；后续对字符数组的修改不会影响新创建的字符串。      
		 */
		String string4 = new String(new char[]{'a','b','c'},1,2);   //bc
		
		String s1 = "abcdef";
		String s2 = "cdef";
		//几种常用方法
		s1.length();
		s1.equals(s2);
		s1.compareTo(s2);
		s1.compareToIgnoreCase(s1);
		s1.charAt(3);//输入索引，返回指定字符
		s1.concat(s2);//s1+s2
		s1.contains(s2);
		char [] c = new char[]{'a','b','c','d'};
		String s5 = "";
		String s6 = "";
		s5 = s5.copyValueOf(c);
		s6.copyValueOf(c,1,2);
		s1.endsWith("f");
		s1.startsWith("a");
		s1.indexOf(99,0);
		s1.indexOf('c',0);
		s1.lastIndexOf('c');
		s1.substring(0, 2);
		s1.toCharArray();
		s1.toLowerCase();
		s1.toUpperCase();
		s1.trim();
		
		System.out.println(s5);
		
		
		
		
	
		
		
	}
	public static void testStringBuffer(){}
	public static void testStringBuilder(){}
}
